from datetime import datetime, time

import discord
from discord import ButtonStyle, Embed, ui, Interaction
from discord import app_commands, User
from discord.ext import commands, tasks
from sqlalchemy.engine import Row

from app import NOTIFICATION_CHANNEL
from app.configuration import MY_GUILD
from app.log import logger
from app.utils import tomorrow_text_type, BotSetter, catch_exception
from app.utils.data.birthday_reminder import BirthdayDataReminder


class BirthdayCRUD(commands.Cog):

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.hybrid_command(name="bl", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–æ–≤ :)")
    @app_commands.guilds(MY_GUILD)
    async def birthday_list(self, ctx: commands.Context):
        birthday_users = BirthdayDataReminder.get_all_birthday_users()

        if not birthday_users:
            await ctx.send("–ù–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /ba")
            return
        user_embed = await self.create_birthday_list_embed(birthday_users)
        await ctx.send(embed=user_embed)

    async def create_birthday_list_embed(self, birthday_users: list[Row]) -> Embed:
        user_embed = Embed(title="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
        for user_id, birth_date in birthday_users:
            user = await self.bot.fetch_user(user_id)
            user_embed.add_field(
                name=f"{user.name} id-> {user_id}",
                value=birth_date.strftime("%Y-%m-%d"),
                inline=False
            )
        return user_embed

    @commands.hybrid_command(name="bd", description="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–æ–≤")
    @commands.has_permissions(administrator=True)
    @app_commands.guilds(MY_GUILD)
    @app_commands.describe(
        user_id="Id –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–ö–ú -> —É–ø–æ–º–Ω—è—É—Ç—å)",
    )
    async def delete_birthday(self, ctx: commands.Context, user_id: str):
        try:
            user_id = int(user_id)
        except ValueError:
            await ctx.send("–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        if BirthdayDataReminder.is_user_in_db(user_id):
            await self.confirm_delete(user_id, ctx)
        else:
            await ctx.send(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º id –æ—Ç—Å—Ç—É—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–æ–≤."
                " –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /bl"
            )

    async def confirm_delete(self, user_id: int, ctx: commands.Context):
        response_view = self.create_response_for_delete_birthday(user_id)
        await ctx.send("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–æ–≤?", view=await response_view)

    async def create_response_for_delete_birthday(self, user_id: int) -> ui.View:
        view = ui.View()

        green_button = ui.Button(style=ButtonStyle.green, label="–û—Å—Ç–∞–≤–∏—Ç—å")
        green_button.callback = lambda interaction: self.dont_delete_callback(interaction, user_id)

        red_button = ui.Button(style=ButtonStyle.red, label="–£–¥–∞–ª–∏—Ç—å")
        red_button.callback = lambda interaction: self.delete_birthday_callback(interaction, user_id)

        view.add_item(item=green_button)
        view.add_item(item=red_button)
        return view

    @staticmethod
    async def delete_birthday_callback(interaction: Interaction, user_id: int):
        BirthdayDataReminder.delete(
            condition=(BirthdayDataReminder.get_table().c.user_id == user_id)
        )
        await interaction.response.send_message(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ <@{user_id}> —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.")

    @staticmethod
    async def dont_delete_callback(interaction: Interaction, user_id: int):
        await interaction.response.send_message(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ <@{user_id}> –æ—Å—Ç–∞–ª—Å—è –≤ –±–∞–∑–µ.")

    @commands.hybrid_command(name="ba", description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏–º–º–µ–Ω–∏–Ω–∏–∫–∞ –≤ –±–∞–∑—É")
    @commands.has_permissions(administrator=True)
    @app_commands.guilds(MY_GUILD)
    @app_commands.describe(
        user="–ù—É–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–ö–ú -> —É–ø–æ–º–Ω—è—É—Ç—å)",
        input_birth_date="–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–º–º-–¥–¥: 1952-10-07",
    )
    async def add_birthday(self, ctx: commands.Context, user: User, input_birth_date: str):
        if not self.is_valid_date(input_birth_date):
            await ctx.send(f"–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {input_birth_date}: –ì–ì–ì–ì-–º–º-–¥–¥: 1952-10-07")
            return

        birthday_in_db_date = BirthdayDataReminder.get_user_birth_day(user.id)
        if birthday_in_db_date:
            await self.update_birthday(ctx, user, birthday_in_db_date, input_birth_date)
            return

        BirthdayDataReminder.insert(date=input_birth_date, user_id=user.id)
        await ctx.send(
            f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ {input_birth_date} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É."
        )

    @staticmethod
    def is_valid_date(date: str) -> bool:
        try:
            date = datetime.strptime(date, '%Y-%m-%d')
        except ValueError:
            return False
        if datetime.now() < date:
            return False
        return True

    async def update_birthday(self, ctx: commands.Context, user: User, date_in_db: str, new_date: str):
        response_view = self.create_response_for_new_birthday(user.id, new_date)
        info = Embed(
            title=f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ {user.name} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É",
            color=discord.Color.green()
        )
        info.add_field(
            name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –≤ –±–∞–∑–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è {date_in_db}",
            value=f"–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ **{new_date}** ?")
        await ctx.send(embed=info, view=await response_view)

    async def create_response_for_new_birthday(self, user_id: int, birth_date: str) -> ui.View:
        view = ui.View()

        green_button = ui.Button(style=ButtonStyle.green, label="–û–±–Ω–æ–≤–∏—Ç—å")
        green_button.callback = lambda interaction: self.renew_button_callback(interaction, user_id, birth_date)

        red_button = ui.Button(style=ButtonStyle.red, label="–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å")
        red_button.callback = lambda interaction: self.dont_update_callback(interaction, user_id)

        view.add_item(item=green_button)
        view.add_item(item=red_button)
        return view

    @staticmethod
    async def renew_button_callback(interaction: Interaction, user_id: int, birth_date: str):
        BirthdayDataReminder.update(
            date=birth_date,
            condition=(BirthdayDataReminder.get_table().c.user_id == user_id)
        )
        await interaction.response.send_message(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {birth_date} –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{user_id}>"
        )

    @staticmethod
    async def dont_update_callback(interaction: Interaction, user_id: int):
        await interaction.response.send_message(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ <@{user_id}> –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º.")


class BirthdayReminder(BotSetter):
    tz = datetime.now().astimezone().tzinfo
    daily_time = time(hour=23, minute=25, tzinfo=tz)

    @tasks.loop(time=daily_time)
    @catch_exception
    async def remind_birthday_routine(self):
        birthday_data_query = BirthdayDataReminder.get_birthdays_for_next_day()
        if birthday_data_query is None:
            return

        birthday_data_list = [user_id[0] for user_id in birthday_data_query]
        birthday_users = await self.get_users(birthday_data_list)
        await self.send_reminds(birthday_users)
        logger.info("Successfully send reminds for tomorrow")

    async def get_users(self, birthday_data_list: list[int]) -> list[User]:
        return [await self.bot.fetch_user(user_id) for user_id in birthday_data_list]

    async def send_reminds(self, birthday_users: list[User]):
        if NOTIFICATION_CHANNEL is None:
            return
        channel = self.bot.get_channel(NOTIFICATION_CHANNEL)
        users = ", ".join(f"<@{user.id}>" for user in birthday_users)
        if len(birthday_users) > 1:
            await channel.send(
                f"{tomorrow_text_type()} —É {users} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ, –¥–∞–≤–∞–π—Ç–µ –º—ã –∏—Ö –¥—Ä—É–∂–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–∏–º."
            )
        else:
            await channel.send(
                f"{tomorrow_text_type()} —É {users} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ, –ø–æ—Ö–ª–æ–ø–∞–µ–º –Ω–∞—à–µ–º—É –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É ü•≥."
            )


birthday_reminder = BirthdayReminder()


async def setup(bot: commands.Bot) -> None:
    await bot.add_cog(BirthdayCRUD(bot), guild=MY_GUILD)
